
optiboot_atmega1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  0001fc00  0001fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .version      00000002  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000277  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000453  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024a  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bf  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d3  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ee  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001249  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
   1fc02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
   1fc04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
   1fc06:	81 ff       	sbrs	r24, 1
   1fc08:	fb d0       	rcall	.+502    	; 0x1fe00 <appStart>


  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc0a:	85 e0       	ldi	r24, 0x05	; 5
   1fc0c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

  UCSR0A = _BV(U2X0); //Double speed mode USART0
   1fc10:	82 e0       	ldi	r24, 0x02	; 2
   1fc12:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
   1fc16:	88 e1       	ldi	r24, 0x18	; 24
   1fc18:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
   1fc1c:	96 e0       	ldi	r25, 0x06	; 6
   1fc1e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc22:	99 e1       	ldi	r25, 0x19	; 25
   1fc24:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fc28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
   1fc2c:	8e e0       	ldi	r24, 0x0E	; 14
   1fc2e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc32:	21 9a       	sbi	0x04, 1	; 4
   1fc34:	84 e0       	ldi	r24, 0x04	; 4
  putch(STK_INSYNC);
}

void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc36:	23 ec       	ldi	r18, 0xC3	; 195
   1fc38:	3f ef       	ldi	r19, 0xFF	; 255
    TIFR1 = _BV(TOV1);
   1fc3a:	91 e0       	ldi	r25, 0x01	; 1
  putch(STK_INSYNC);
}

void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc3c:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
   1fc40:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
   1fc44:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc46:	b0 9b       	sbis	0x16, 0	; 22
   1fc48:	fe cf       	rjmp	.-4      	; 0x1fc46 <main+0x46>
    LED_PIN |= _BV(LED);
   1fc4a:	19 9a       	sbi	0x03, 1	; 3
  } while (--count);
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc4c:	a8 95       	wdr
   1fc4e:	81 50       	subi	r24, 0x01	; 1
    TCNT1 = -(F_CPU/(1024*16));
    TIFR1 = _BV(TOV1);
    while(!(TIFR1 & _BV(TOV1)));
    LED_PIN |= _BV(LED);
    watchdogReset();
  } while (--count);
   1fc50:	a9 f7       	brne	.-22     	; 0x1fc3c <main+0x3c>
   * Making these local and in registers prevents the need for initializing
   * them, and also saves space because code no longer stores to memory.
   * (initializing address keeps the compiler happy, but isn't really
   *  necessary, and uses 4 bytes of flash.)
   */
  register uint16_t address = 0;
   1fc52:	d0 e0       	ldi	r29, 0x00	; 0
   1fc54:	c0 e0       	ldi	r28, 0x00	; 0
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fc56:	08 e1       	ldi	r16, 0x18	; 24
  WDTCSR = x;
   1fc58:	48 e0       	ldi	r20, 0x08	; 8
   1fc5a:	f4 2e       	mov	r15, r20
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fc5c:	ee 24       	eor	r14, r14
   1fc5e:	e3 94       	inc	r14
      __boot_page_write_short((uint16_t)(void*)address);
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
   1fc60:	51 e1       	ldi	r21, 0x11	; 17
   1fc62:	d5 2e       	mov	r13, r21
  flash_led(LED_START_FLASHES * 2);

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc64:	13 e0       	ldi	r17, 0x03	; 3
   1fc66:	a7 d0       	rcall	.+334    	; 0x1fdb6 <getch>

    if(ch == STK_GET_PARAMETER) {
   1fc68:	81 34       	cpi	r24, 0x41	; 65
      unsigned char which = getch();
   1fc6a:	81 f4       	brne	.+32     	; 0x1fc8c <main+0x8c>
   1fc6c:	a4 d0       	rcall	.+328    	; 0x1fdb6 <getch>
      verifySpace();
   1fc6e:	b8 2e       	mov	r11, r24
   1fc70:	ae d0       	rcall	.+348    	; 0x1fdce <verifySpace>
      if (which == 0x82) {
   1fc72:	82 e8       	ldi	r24, 0x82	; 130
   1fc74:	b8 12       	cpse	r11, r24
   1fc76:	02 c0       	rjmp	.+4      	; 0x1fc7c <main+0x7c>
    else if(ch == STK_READ_SIGN) {
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
      putch(SIGNATURE_0);
      putch(SIGNATURE_1);
      putch(SIGNATURE_2);
   1fc78:	85 e0       	ldi	r24, 0x05	; 5
   1fc7a:	04 c0       	rjmp	.+8      	; 0x1fc84 <main+0x84>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
	  putch(OPTIBOOT_MAJVER);
   1fc7c:	e1 e8       	ldi	r30, 0x81	; 129
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1fc7e:	84 e0       	ldi	r24, 0x04	; 4
   1fc80:	be 12       	cpse	r11, r30
   1fc82:	83 e0       	ldi	r24, 0x03	; 3
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    }
    putch(STK_OK);
   1fc84:	91 d0       	rcall	.+290    	; 0x1fda8 <putch>
   1fc86:	80 e1       	ldi	r24, 0x10	; 16
  flash_led(LED_START_FLASHES * 2);

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc88:	8f d0       	rcall	.+286    	; 0x1fda8 <putch>
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1fc8a:	ed cf       	rjmp	.-38     	; 0x1fc66 <main+0x66>
   1fc8c:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
   1fc8e:	19 f4       	brne	.+6      	; 0x1fc96 <main+0x96>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc90:	84 e1       	ldi	r24, 0x14	; 20
   1fc92:	a9 d0       	rcall	.+338    	; 0x1fde6 <getNch>
    }
    else if(ch == STK_SET_DEVICE) {
      // SET DEVICE is ignored
      getNch(20);
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fc94:	f8 cf       	rjmp	.-16     	; 0x1fc86 <main+0x86>
   1fc96:	85 34       	cpi	r24, 0x45	; 69
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc98:	11 f4       	brne	.+4      	; 0x1fc9e <main+0x9e>
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fc9a:	85 e0       	ldi	r24, 0x05	; 5
   1fc9c:	fa cf       	rjmp	.-12     	; 0x1fc92 <main+0x92>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1fc9e:	85 35       	cpi	r24, 0x55	; 85
   1fca0:	79 f4       	brne	.+30     	; 0x1fcc0 <main+0xc0>
   1fca2:	89 d0       	rcall	.+274    	; 0x1fdb6 <getch>
   1fca4:	c8 2f       	mov	r28, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fca6:	d0 e0       	ldi	r29, 0x00	; 0
   1fca8:	86 d0       	rcall	.+268    	; 0x1fdb6 <getch>
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1fcaa:	d8 2b       	or	r29, r24
   1fcac:	ce 01       	movw	r24, r28
   1fcae:	88 27       	eor	r24, r24
   1fcb0:	99 0f       	add	r25, r25
   1fcb2:	88 1f       	adc	r24, r24
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1fcb4:	99 27       	eor	r25, r25
   1fcb6:	8b bf       	out	0x3b, r24	; 59
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fcb8:	cc 0f       	add	r28, r28
   1fcba:	dd 1f       	adc	r29, r29
#endif
      newAddress += newAddress; // Convert from word address to byte address
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
   1fcbc:	88 d0       	rcall	.+272    	; 0x1fdce <verifySpace>
      // UNIVERSAL command is ignored
      getNch(4);
   1fcbe:	e3 cf       	rjmp	.-58     	; 0x1fc86 <main+0x86>
   1fcc0:	86 35       	cpi	r24, 0x56	; 86
      putch(0x00);
   1fcc2:	21 f4       	brne	.+8      	; 0x1fccc <main+0xcc>
   1fcc4:	84 e0       	ldi	r24, 0x04	; 4
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcc6:	8f d0       	rcall	.+286    	; 0x1fde6 <getNch>
   1fcc8:	80 e0       	ldi	r24, 0x00	; 0
   1fcca:	dc cf       	rjmp	.-72     	; 0x1fc84 <main+0x84>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
   1fccc:	84 36       	cpi	r24, 0x64	; 100
   1fcce:	09 f0       	breq	.+2      	; 0x1fcd2 <main+0xd2>
      length = getch();
   1fcd0:	44 c0       	rjmp	.+136    	; 0x1fd5a <main+0x15a>
   1fcd2:	71 d0       	rcall	.+226    	; 0x1fdb6 <getch>
   1fcd4:	70 d0       	rcall	.+224    	; 0x1fdb6 <getch>
      getch();
   1fcd6:	c8 2e       	mov	r12, r24
   1fcd8:	6e d0       	rcall	.+220    	; 0x1fdb6 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
   1fcda:	c1 15       	cp	r28, r1
   1fcdc:	f0 ee       	ldi	r31, 0xE0	; 224
   1fcde:	df 07       	cpc	r29, r31
   1fce0:	18 f4       	brcc	.+6      	; 0x1fce8 <main+0xe8>
   1fce2:	fe 01       	movw	r30, r28
   1fce4:	17 bf       	out	0x37, r17	; 55
   1fce6:	e8 95       	spm
   1fce8:	81 2c       	mov	r8, r1
   1fcea:	99 24       	eor	r9, r9

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fcec:	93 94       	inc	r9
   1fcee:	54 01       	movw	r10, r8
   1fcf0:	ff ef       	ldi	r31, 0xFF	; 255
   1fcf2:	af 1a       	sub	r10, r31
   1fcf4:	bf 0a       	sbc	r11, r31
   1fcf6:	5f d0       	rcall	.+190    	; 0x1fdb6 <getch>
   1fcf8:	f4 01       	movw	r30, r8
   1fcfa:	80 83       	st	Z, r24
      while (--length);
   1fcfc:	45 01       	movw	r8, r10
   1fcfe:	ca 10       	cpse	r12, r10

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
   1fd00:	f6 cf       	rjmp	.-20     	; 0x1fcee <main+0xee>
   1fd02:	c1 15       	cp	r28, r1
   1fd04:	f0 ee       	ldi	r31, 0xE0	; 224
   1fd06:	df 07       	cpc	r29, r31
   1fd08:	18 f0       	brcs	.+6      	; 0x1fd10 <main+0x110>
   1fd0a:	fe 01       	movw	r30, r28
   1fd0c:	17 bf       	out	0x37, r17	; 55

      // Read command terminator, start reply
      verifySpace();
   1fd0e:	e8 95       	spm
   1fd10:	5e d0       	rcall	.+188    	; 0x1fdce <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
   1fd12:	07 b6       	in	r0, 0x37	; 55
   1fd14:	00 fc       	sbrc	r0, 0
   1fd16:	fd cf       	rjmp	.-6      	; 0x1fd12 <main+0x112>
   1fd18:	fe 01       	movw	r30, r28
        buff[1] = 0xce; // rjmp 0x1d00 instruction
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
   1fd1a:	a0 e0       	ldi	r26, 0x00	; 0
   1fd1c:	b1 e0       	ldi	r27, 0x01	; 1
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
   1fd1e:	9c 91       	ld	r25, X
   1fd20:	9d 01       	movw	r18, r26
   1fd22:	2e 5f       	subi	r18, 0xFE	; 254
   1fd24:	3f 4f       	sbci	r19, 0xFF	; 255
        a |= (*bufPtr++) << 8;
   1fd26:	11 96       	adiw	r26, 0x01	; 1
   1fd28:	8c 91       	ld	r24, X
   1fd2a:	11 97       	sbiw	r26, 0x01	; 1
   1fd2c:	89 27       	eor	r24, r25
   1fd2e:	98 27       	eor	r25, r24
   1fd30:	89 27       	eor	r24, r25
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fd32:	0c 01       	movw	r0, r24
   1fd34:	e7 be       	out	0x37, r14	; 55
   1fd36:	e8 95       	spm
   1fd38:	11 24       	eor	r1, r1
        addrPtr += 2;
   1fd3a:	32 96       	adiw	r30, 0x02	; 2
      } while (--ch);
   1fd3c:	ae 3f       	cpi	r26, 0xFE	; 254
   1fd3e:	b1 40       	sbci	r27, 0x01	; 1

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
   1fd40:	51 f4       	brne	.+20     	; 0x1fd56 <main+0x156>
   1fd42:	85 e0       	ldi	r24, 0x05	; 5
      boot_spm_busy_wait();
   1fd44:	fe 01       	movw	r30, r28
   1fd46:	87 bf       	out	0x37, r24	; 55
   1fd48:	e8 95       	spm

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
   1fd4a:	07 b6       	in	r0, 0x37	; 55
   1fd4c:	00 fc       	sbrc	r0, 0
   1fd4e:	fd cf       	rjmp	.-6      	; 0x1fd4a <main+0x14a>
   1fd50:	d7 be       	out	0x37, r13	; 55
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fd52:	e8 95       	spm
   1fd54:	98 cf       	rjmp	.-208    	; 0x1fc86 <main+0x86>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
   1fd56:	d9 01       	movw	r26, r18
   1fd58:	e2 cf       	rjmp	.-60     	; 0x1fd1e <main+0x11e>
      length = getch();
   1fd5a:	84 37       	cpi	r24, 0x74	; 116
   1fd5c:	a9 f4       	brne	.+42     	; 0x1fd88 <main+0x188>
   1fd5e:	2b d0       	rcall	.+86     	; 0x1fdb6 <getch>
      getch();
   1fd60:	2a d0       	rcall	.+84     	; 0x1fdb6 <getch>
   1fd62:	b8 2e       	mov	r11, r24

      verifySpace();
   1fd64:	28 d0       	rcall	.+80     	; 0x1fdb6 <getch>
   1fd66:	33 d0       	rcall	.+102    	; 0x1fdce <verifySpace>
// Since RAMPZ should already be set, we need to use EPLM directly.
//      do putch(pgm_read_byte_near(address++));
//      while (--length);
      do {
        uint8_t result;
        __asm__ ("elpm %0,Z\n":"=r"(result):"z"(address));
   1fd68:	ab 2c       	mov	r10, r11
        putch(result);
   1fd6a:	4e 01       	movw	r8, r28
   1fd6c:	f4 01       	movw	r30, r8
        address++;
   1fd6e:	86 91       	elpm	r24, Z
   1fd70:	1b d0       	rcall	.+54     	; 0x1fda8 <putch>
   1fd72:	ff ef       	ldi	r31, 0xFF	; 255
      }
      while (--length);
   1fd74:	8f 1a       	sub	r8, r31
   1fd76:	9f 0a       	sbc	r9, r31
   1fd78:	aa 94       	dec	r10
   1fd7a:	a1 10       	cpse	r10, r1
   1fd7c:	f7 cf       	rjmp	.-18     	; 0x1fd6c <main+0x16c>
   1fd7e:	21 96       	adiw	r28, 0x01	; 1
   1fd80:	ba 94       	dec	r11
   1fd82:	cb 0d       	add	r28, r11
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fd84:	d1 1d       	adc	r29, r1
   1fd86:	7f cf       	rjmp	.-258    	; 0x1fc86 <main+0x86>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fd88:	85 37       	cpi	r24, 0x75	; 117
   1fd8a:	31 f4       	brne	.+12     	; 0x1fd98 <main+0x198>
      putch(SIGNATURE_0);
   1fd8c:	20 d0       	rcall	.+64     	; 0x1fdce <verifySpace>
   1fd8e:	8e e1       	ldi	r24, 0x1E	; 30
   1fd90:	0b d0       	rcall	.+22     	; 0x1fda8 <putch>
      putch(SIGNATURE_1);
   1fd92:	87 e9       	ldi	r24, 0x97	; 151
   1fd94:	09 d0       	rcall	.+18     	; 0x1fda8 <putch>
   1fd96:	70 cf       	rjmp	.-288    	; 0x1fc78 <main+0x78>
   1fd98:	81 35       	cpi	r24, 0x51	; 81
      putch(SIGNATURE_2);
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fd9a:	09 f0       	breq	.+2      	; 0x1fd9e <main+0x19e>
   1fd9c:	8f cf       	rjmp	.-226    	; 0x1fcbc <main+0xbc>
   1fd9e:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fda2:	f0 92 60 00 	sts	0x0060, r15	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
   1fda6:	8a cf       	rjmp	.-236    	; 0x1fcbc <main+0xbc>

0001fda8 <putch>:
   1fda8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    putch(STK_OK);
  }
}

void putch(char ch) {
  while (!(UCSR0A & _BV(UDRE0)));
   1fdac:	95 ff       	sbrs	r25, 5
   1fdae:	fc cf       	rjmp	.-8      	; 0x1fda8 <putch>
  UDR0 = ch;
   1fdb0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
   1fdb4:	08 95       	ret

0001fdb6 <getch>:
#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);
#endif


  while(!(UCSR0A & _BV(RXC0)));
   1fdb6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fdba:	87 ff       	sbrs	r24, 7
   1fdbc:	fc cf       	rjmp	.-8      	; 0x1fdb6 <getch>
  if (!(UCSR0A & _BV(FE0))) {
   1fdbe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fdc2:	84 fd       	sbrc	r24, 4
   1fdc4:	01 c0       	rjmp	.+2      	; 0x1fdc8 <getch+0x12>
  } while (--count);
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fdc6:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
   1fdc8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);
#endif

  return ch;
}
   1fdcc:	08 95       	ret

0001fdce <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fdce:	f3 df       	rcall	.-26     	; 0x1fdb6 <getch>
   1fdd0:	80 32       	cpi	r24, 0x20	; 32
   1fdd2:	39 f0       	breq	.+14     	; 0x1fde2 <verifySpace+0x14>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fdd4:	88 e1       	ldi	r24, 0x18	; 24
   1fdd6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
   1fdda:	88 e0       	ldi	r24, 0x08	; 8
   1fddc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1fde0:	ff cf       	rjmp	.-2      	; 0x1fde0 <verifySpace+0x12>
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1);			      // and busy-loop so that WD causes
    				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fde2:	84 e1       	ldi	r24, 0x14	; 20
   1fde4:	e1 cf       	rjmp	.-62     	; 0x1fda8 <putch>

0001fde6 <getNch>:
#endif

  return ch;
}

void getNch(uint8_t count) {
   1fde6:	cf 93       	push	r28
  do getch(); while (--count);
   1fde8:	c8 2f       	mov	r28, r24
   1fdea:	e5 df       	rcall	.-54     	; 0x1fdb6 <getch>
   1fdec:	c1 50       	subi	r28, 0x01	; 1
  verifySpace();
}
   1fdee:	e9 f7       	brne	.-6      	; 0x1fdea <getNch+0x4>
  return ch;
}

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   1fdf0:	cf 91       	pop	r28
   1fdf2:	ed cf       	rjmp	.-38     	; 0x1fdce <verifySpace>

0001fdf4 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fdf4:	e0 e6       	ldi	r30, 0x60	; 96
   1fdf6:	f0 e0       	ldi	r31, 0x00	; 0
   1fdf8:	98 e1       	ldi	r25, 0x18	; 24
   1fdfa:	90 83       	st	Z, r25
  WDTCSR = x;
   1fdfc:	80 83       	st	Z, r24
}
   1fdfe:	08 95       	ret

0001fe00 <appStart>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe00:	e0 e6       	ldi	r30, 0x60	; 96
   1fe02:	f0 e0       	ldi	r31, 0x00	; 0
   1fe04:	88 e1       	ldi	r24, 0x18	; 24
   1fe06:	80 83       	st	Z, r24
  WDTCSR = x;
   1fe08:	10 82       	st	Z, r1
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
   1fe0a:	ee 27       	eor	r30, r30
   1fe0c:	ff 27       	eor	r31, r31
   1fe0e:	09 94       	ijmp
